/*
 * Copyright 2019 Hayo van Loon
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package bobsknobshop.messaging.v1;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

import "bobsknobshop/messaging/v1/objects.proto";

option java_multiple_files = true;
option java_package = "gl.bobsknobshop.messaging.v1";
option go_package = "github.com/HayoVanLoon/protoworkflow-genproto/bobsknobshop/messaging/v1;messaging";


// A service acting as a hub for messaging workflows.
service Messaging {

    // Stores a new message.
    // The message status will be TO_DO.
    rpc PostMessage(PostMessageRequest) returns (PostMessageResponse) {
    }

    // Retrieves an open question.
    // The message status will be set to IN_PROCESS.
    rpc GetQuestion(GetQuestionRequest) returns (GetQuestionResponse) {
    }

    // Retrieves an open complaint.
    // The message status will be set to IN_PROCESS.
    rpc GetComplaint(GetComplaintRequest) returns (GetComplaintResponse) {
    }

    // Retrieves an open feedback message.
    // The message status will be set to IN_PROCESS.
    rpc GetFeedback(GetFeedbackRequest) returns (GetFeedbackResponse) {
    }

    // Moves a message to a different category.
    // The message status will be reset to TO_DO.
    rpc MoveMessage(MoveMessageRequest) returns (MoveMessageResponse) {
    }

    // Updates a message status.
    // If the message does not exist (because it was removed), this action will
    // fail.
    rpc UpdateStatus(UpdateStatusRequest) returns (UpdateStatusResponse) {
    }

    // Retrieves a message by its name.
    rpc GetMessage(GetMessageRequest) returns (GetMessageResponse) {
    }

    // Searches for messages matching the query.
    // See the SearchMessagesRequest description for query details.
    rpc SearchMessages(SearchMessagesRequest) returns (SearchMessagesResponse) {
    }

    // Permanently deletes a message.
    rpc DeleteMessage(DeleteMessageRequest) returns (google.protobuf.Empty) {
    }
}


message PostMessageRequest {

    oneof message {
        // A message sent by a customer.
        CustomerMessage customer_message = 1;
    }
}


message PostMessageResponse {

    // The newly stored message.
    oneof message {
        CustomerMessage customer_message = 1;
    }
}


message GetQuestionRequest {
}


message GetQuestionResponse {

    // An unprocessed question.
    oneof message {
        CustomerMessage customer_message = 1;
    }
}


message GetComplaintRequest {
}


message GetComplaintResponse {

    // An unprocessed complaint.
    oneof message {
        CustomerMessage customer_message = 1;
    }
}


message GetFeedbackRequest {
}


message GetFeedbackResponse {

    // An unprocessed feedback message.
    oneof message {
        CustomerMessage customer_message = 1;
    }
}


message MoveMessageRequest {

    // The message to move.
    string message_id = 1;

    // Move message out of this category bucket.
    // If the message does not have this category, this request will fail.
    MessageCategory old_category = 2;

    // Move message to this category bucket.
    MessageCategory new_category = 3;
}


message MoveMessageResponse {

    // The message after being moved to a new category.
    oneof message {
        CustomerMessage customer_message = 1;
    }
}


message UpdateStatusRequest {

    // The message to update the status for.
    string message = 1;

    // If the message does not have this status, this request will fail.
    Status old_status = 2;

    // The new status.
    Status new_status = 3;
}


message UpdateStatusResponse {

    // The updated message.
    oneof message {
        CustomerMessage customer_message = 1;
    }
}


message GetMessageRequest {
    string name = 1;
}


message GetMessageResponse {

    oneof message {
        // A message sent by a customer.
        CustomerMessage customer_message = 1;
    }
}


// A message for searching messages using a query.
// A query consists of lists of names and/or categories and/or statuses.
// Each non-empty list is used as a filter. To pass a filter, the respective
// message field value must be present in the list.
// At least one of the lists must be non-empty.
message SearchMessagesRequest {

    // A (possibly empty) list of message ids.
    repeated string names = 1;

    // A (possibly empty) list of categories.
    repeated MessageCategory categories = 2;

    // A (possibly empty) list of statuses.
    repeated Status status = 3;
}


message SearchMessagesResponse {

    // The messages that passed the search filters.
    repeated CustomerMessage customer_messages = 1;
}


message DeleteMessageRequest {

    // The message id.
    string name = 1;
}
