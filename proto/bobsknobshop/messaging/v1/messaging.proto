/*
 * Copyright 2019 Hayo van Loon
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package bobsknobshop.messaging.v1;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

import "bobsknobshop/messaging/v1/objects.proto";

option java_multiple_files = true;
option java_package = "gl.bobsknobshop.messaging.v1";
option go_package = "github.com/HayoVanLoon/protoworkflow-genproto/bobsknobshop/messaging/v1;messaging";


// A service acting as a hub for messaging workflows.
service Messaging {

    // Stores a new message.
    // The message status will be TO_DO.
    rpc CreateMessage(CreateMessageRequest) returns (CustomerMessage) {
    }

    // Retrieves a message by its name.
    rpc GetMessage(GetMessageRequest) returns (CustomerMessage) {
    }

    // Updates a message.
    rpc UpdateMessage(UpdateMessageRequest) returns (CustomerMessage) {
}

    // Permanently deletes a message.
    rpc DeleteMessage(DeleteMessageRequest) returns (google.protobuf.Empty) {
    }

    // Searches for messages matching the query.
    // See the SearchMessagesRequest description for query details.
    rpc SearchMessages(SearchMessagesRequest) returns (SearchMessagesResponse) {
    }

    // Moves a message to a different category.
    // The message status will be reset to TO_DO.
    rpc MoveMessage(MoveMessageRequest) returns (CustomerMessage) {
    }
}


message CreateMessageRequest {

    oneof message {
        // A message sent by a customer.
        CustomerMessage customer_message = 1;
    }
}


message GetMessageRequest {

    string name = 1;
}


message UpdateMessageRequest {

    CustomerMessage message = 1;
}


message DeleteMessageRequest {

    // The message id.
    string name = 1;
}


// A message for searching messages using a query.
// A query consists of lists of names and/or categories and/or statuses.
// Each non-empty list is used as a filter. To pass a filter, the respective
// message field value must be present in the list.
// At least one of the lists must be non-empty.
message SearchMessagesRequest {

    // A (possibly empty) list of message ids.
    repeated string names = 1;

    // A (possibly empty) list of categories.
    repeated MessageCategory categories = 2;

    // A (possibly empty) list of statuses.
    repeated Status status = 3;
}


message SearchMessagesResponse {

    // The messages that passed the search filters.
    repeated CustomerMessage customer_messages = 1;
}


message MoveMessageRequest {

    // The message to move.
    string message_id = 1;

    // Move message out of this category bucket.
    // If the message does not have this category, this request will fail.
    MessageCategory old_category = 2;

    // Move message to this category bucket.
    MessageCategory new_category = 3;
}
