/*
 * Copyright 2019 Hayo van Loon
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package bobsknobshop.storage.v1;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

import "bobsknobshop/storage/v1/objects.proto";

option java_multiple_files = true;
option java_package = "gl.bobsknobshop.storage.v1";
option go_package = "github.com/HayoVanLoon/protoworkflow-genproto/bobsknobshop/storage/v1;storage";


// A service acting as a (proxy for) data storage.
service Storage {

    // Stores data by a given key.
    // If data is already stored by the given key, nothing happens.
    rpc CreateStoredObject(CreateStoredObjectRequest) returns (StoredObject) {
    }

    rpc GetObject(GetStoredObjectRequest) returns (StoredObject) {
    }

    // Updates an object, but only when its current etag matches the provided
    // etag.
    rpc UpdateStoredObject(UpdateStoredObjectRequest) returns (StoredObject) {
    }

    // Deletes data.
    rpc DeleteObject(DeleteStoredObjectRequest) returns (google.protobuf.Empty) {
    }

    // Produces some stats on storage
    rpc GetStats(GetStatsRequest) returns (GetStatsResponse) {
    }
}


message CreateStoredObjectRequest {

    // Key to store data by.
    Key key = 1;

    // Data to store.
    bytes data = 2;
}


message GetStoredObjectRequest {

    // Keys of data to retrieve.
    // Keys may contain wildcards.
    repeated Key keys = 1;

    // Maximum number of items returned.
    int32 limit = 3;
}


message UpdateStoredObjectRequest {

    Key old_key = 1;

    StoredObject object = 2;
}


message DeleteStoredObjectRequest {

    // Keys of data to delete.
    // Uses exact keys.
    repeated Key keys = 1;
}


message GetStatsRequest {
}


message GetStatsResponse {

    int32 num_items = 1;
}
