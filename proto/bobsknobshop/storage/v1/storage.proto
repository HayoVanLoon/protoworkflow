/*
 * Copyright 2019 Hayo van Loon
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package bobsknobshop.storage.v1;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

option java_multiple_files = true;
option java_package = "gl.bobsknobshop.storage.v1";
option go_package = "github.com/HayoVanLoon/protoworkflow-genproto/bobsknobshop/storage/v1;storage";


// A service acting as a (proxy for) data storage.
service Storage {

    // Stores data by a given key.
    // If data is already stored by the given key, nothing happens.
    rpc CreateObject(CreateObjectRequest) returns (CreateObjectResponse) {
    }

    // Retrieves one or more data by key(s).
    // Keys may contain wildcard values.
    rpc GetObject(GetObjectRequest) returns (GetObjectResponse) {
    }

    // Deletes data.
    rpc DeleteObject(DeleteObjectRequest) returns (google.protobuf.Empty) {
    }

    // Mutates an object, but only when its current etag matches the provided
    // etag.
    // If this check fails or the item does not exist, an empty string is
    // returned.
    rpc MutateObject(MutateObjectRequest) returns (MutateObjectResponse) {
    }

    // Produces some stats on storage
    rpc GetStats(GetStatsRequest) returns (GetStatsResponse) {
    }
}


message CreateObjectRequest {

    // Key to store data by.
    Key key = 1;

    // Data to store.
    bytes data = 2;
}


message CreateObjectResponse {

    // Name by which object is stored.
    string name = 1;

    // The object's etag, calculated over the object data
    string etag = 2;
}


message GetObjectRequest {

    // Keys of data to retrieve.
    // Keys may contain wildcards.
    repeated Key keys = 1;

    // Maximum number of items returned.
    int32 limit = 3;
}


message GetObjectResponse {

    repeated Entry  entries = 1;

    message Entry {

        // The object's key
        Key key = 1;

        // The object's etag, calculated over the data
        string etag = 2;

        // The data
        bytes data = 3;
    }
}


message DeleteObjectRequest {

    // Keys of data to delete.
    // Uses exact keys.
    repeated Key keys = 1;
}


message MutateObjectRequest {
    Key old_key = 1;
    Key new_key = 2;
    string old_etag = 3;
    bytes new_data = 4;
}


message MutateObjectResponse {
    string new_etag = 2;
}


message GetStatsRequest {
}


message GetStatsResponse {
    int32 num_items = 1;
}


message Key {

    // Name by which object is stored.
    // Output only
    string name = 1;

    // A key consists of a list of key-values.
    repeated Part parts = 2;

    // Additional search keys
    repeated Part indexed_values = 3;

    message Part {

        // Must not contain '=' or '~'
        string key = 1;

        // The wildcard character '*' is reserved and may not be used when
        // storing values.
        // Can be set to the wildcard character '*' in queries.
        // Must not contain '=' or '~'
        string value = 2;
    }
}
